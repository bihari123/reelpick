{"ast":null,"code":"// src/components/Upload/utils/fileValidation.ts\n\nimport { UPLOAD_CONFIG } from \"../constants/upload.constants\";\nexport const validateFile = file => {\n  // Check file size\n  if (file.size > UPLOAD_CONFIG.MAX_FILE_SIZE) {\n    return `File size (${formatFileSize(file.size)}) exceeds maximum limit of ${formatFileSize(UPLOAD_CONFIG.MAX_FILE_SIZE)}`;\n  }\n\n  // Check file type\n  const fileExtension = file.name.toLowerCase().split(\".\").pop();\n  if (!fileExtension || !UPLOAD_CONFIG.ALLOWED_TYPES.includes(`.${fileExtension}`)) {\n    return `File type .${fileExtension} is not supported. Please upload ${UPLOAD_CONFIG.ALLOWED_TYPES.join(\" or \")} file`;\n  }\n  return null;\n};\nexport const formatFileSize = bytes => {\n  const units = [\"B\", \"KB\", \"MB\", \"GB\"];\n  let size = bytes;\n  let unitIndex = 0;\n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n  return `${size.toFixed(2)} ${units[unitIndex]}`;\n};","map":{"version":3,"names":["UPLOAD_CONFIG","validateFile","file","size","MAX_FILE_SIZE","formatFileSize","fileExtension","name","toLowerCase","split","pop","ALLOWED_TYPES","includes","join","bytes","units","unitIndex","length","toFixed"],"sources":["/media/tarun/ITB/code/work/thinkelution/Videolution-Analyzer-App/src/Components/Upload/utils/fileValidation.ts"],"sourcesContent":["// src/components/Upload/utils/fileValidation.ts\n\nimport { UPLOAD_CONFIG } from \"../constants/upload.constants\";\n\nexport const validateFile = (file: File): string | null => {\n  // Check file size\n  if (file.size > UPLOAD_CONFIG.MAX_FILE_SIZE) {\n    return `File size (${formatFileSize(file.size)}) exceeds maximum limit of ${formatFileSize(UPLOAD_CONFIG.MAX_FILE_SIZE)}`;\n  }\n\n  // Check file type\n  const fileExtension = file.name.toLowerCase().split(\".\").pop();\n  if (\n    !fileExtension ||\n    !UPLOAD_CONFIG.ALLOWED_TYPES.includes(`.${fileExtension}`)\n  ) {\n    return `File type .${fileExtension} is not supported. Please upload ${UPLOAD_CONFIG.ALLOWED_TYPES.join(\" or \")} file`;\n  }\n\n  return null;\n};\n\nexport const formatFileSize = (bytes: number): string => {\n  const units = [\"B\", \"KB\", \"MB\", \"GB\"];\n  let size = bytes;\n  let unitIndex = 0;\n\n  while (size >= 1024 && unitIndex < units.length - 1) {\n    size /= 1024;\n    unitIndex++;\n  }\n\n  return `${size.toFixed(2)} ${units[unitIndex]}`;\n};\n"],"mappings":"AAAA;;AAEA,SAASA,aAAa,QAAQ,+BAA+B;AAE7D,OAAO,MAAMC,YAAY,GAAIC,IAAU,IAAoB;EACzD;EACA,IAAIA,IAAI,CAACC,IAAI,GAAGH,aAAa,CAACI,aAAa,EAAE;IAC3C,OAAO,cAAcC,cAAc,CAACH,IAAI,CAACC,IAAI,CAAC,8BAA8BE,cAAc,CAACL,aAAa,CAACI,aAAa,CAAC,EAAE;EAC3H;;EAEA;EACA,MAAME,aAAa,GAAGJ,IAAI,CAACK,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;EAC9D,IACE,CAACJ,aAAa,IACd,CAACN,aAAa,CAACW,aAAa,CAACC,QAAQ,CAAC,IAAIN,aAAa,EAAE,CAAC,EAC1D;IACA,OAAO,cAAcA,aAAa,oCAAoCN,aAAa,CAACW,aAAa,CAACE,IAAI,CAAC,MAAM,CAAC,OAAO;EACvH;EAEA,OAAO,IAAI;AACb,CAAC;AAED,OAAO,MAAMR,cAAc,GAAIS,KAAa,IAAa;EACvD,MAAMC,KAAK,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACrC,IAAIZ,IAAI,GAAGW,KAAK;EAChB,IAAIE,SAAS,GAAG,CAAC;EAEjB,OAAOb,IAAI,IAAI,IAAI,IAAIa,SAAS,GAAGD,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IACnDd,IAAI,IAAI,IAAI;IACZa,SAAS,EAAE;EACb;EAEA,OAAO,GAAGb,IAAI,CAACe,OAAO,CAAC,CAAC,CAAC,IAAIH,KAAK,CAACC,SAAS,CAAC,EAAE;AACjD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}