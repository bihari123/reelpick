{"ast":null,"code":"// src/Components/services/fileUploadService.ts\n\nconst CHUNK_SIZE = 1024 * 1024; // 1MB chunks\n\nexport class FileUploadService {\n  async uploadChunk(chunk, chunkIndex, totalChunks, fileId) {\n    const formData = new FormData();\n    formData.append(\"chunk\", chunk);\n    formData.append(\"chunkIndex\", chunkIndex.toString());\n    formData.append(\"totalChunks\", totalChunks.toString());\n    formData.append(\"fileId\", fileId);\n    try {\n      const response = await fetch(\"/api/upload/chunk\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error(`Failed to upload chunk ${chunkIndex}`);\n    }\n  }\n  async initializeUpload(file) {\n    try {\n      const response = await fetch(\"/api/upload/initialize\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          fileName: file.name,\n          fileSize: file.size,\n          totalChunks: Math.ceil(file.size / CHUNK_SIZE)\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to initialize upload\");\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error(\"Failed to initialize upload\");\n    }\n  }\n  async uploadFile(file, callbacks) {\n    try {\n      const {\n        fileId\n      } = await this.initializeUpload(file);\n      const totalChunks = Math.ceil(file.size / CHUNK_SIZE);\n      let uploadedChunks = 0;\n      callbacks.onStatusChange(\"analyzing\");\n      for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n        const start = chunkIndex * CHUNK_SIZE;\n        const end = Math.min(start + CHUNK_SIZE, file.size);\n        const chunk = file.slice(start, end);\n        await this.uploadChunk(chunk, chunkIndex, totalChunks, fileId);\n        uploadedChunks++;\n        const progress = Math.round(uploadedChunks / totalChunks * 100);\n        callbacks.onProgress(progress);\n        if (progress >= 30 && progress < 60) {\n          callbacks.onStatusChange(\"processing\");\n        } else if (progress >= 60 && progress < 100) {\n          callbacks.onStatusChange(\"finalizing\");\n        }\n      }\n      callbacks.onStatusChange(\"done\");\n      callbacks.onSuccess();\n    } catch (error) {\n      callbacks.onError(error);\n    }\n  }\n}","map":{"version":3,"names":["CHUNK_SIZE","FileUploadService","uploadChunk","chunk","chunkIndex","totalChunks","fileId","formData","FormData","append","toString","response","fetch","method","body","ok","Error","status","json","error","initializeUpload","file","headers","JSON","stringify","fileName","name","fileSize","size","Math","ceil","uploadFile","callbacks","uploadedChunks","onStatusChange","start","end","min","slice","progress","round","onProgress","onSuccess","onError"],"sources":["/media/tarun/ITB/code/work/thinkelution/Videolution-Analyzer-App/src/Components/Upload/services/fileUploadService.ts"],"sourcesContent":["// src/Components/services/fileUploadService.ts\n\nimport {\n\tUploadProgressCallback,\n\tChunkUploadResponse,\n\tUploadInitializeResponse,\n} from \"../utils/upload.types\";\n\nconst CHUNK_SIZE = 1024 * 1024; // 1MB chunks\n\nexport class FileUploadService {\n\tprivate async uploadChunk(\n\t\tchunk: Blob,\n\t\tchunkIndex: number,\n\t\ttotalChunks: number,\n\t\tfileId: string,\n\t): Promise<ChunkUploadResponse> {\n\t\tconst formData = new FormData();\n\t\tformData.append(\"chunk\", chunk);\n\t\tformData.append(\"chunkIndex\", chunkIndex.toString());\n\t\tformData.append(\"totalChunks\", totalChunks.toString());\n\t\tformData.append(\"fileId\", fileId);\n\n\t\ttry {\n\t\t\tconst response = await fetch(\"/api/upload/chunk\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\tbody: formData,\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(`HTTP error! status: ${response.status}`);\n\t\t\t}\n\n\t\t\treturn await response.json();\n\t\t} catch (error) {\n\t\t\tthrow new Error(`Failed to upload chunk ${chunkIndex}`);\n\t\t}\n\t}\n\n\tprivate async initializeUpload(\n\t\tfile: File,\n\t): Promise<UploadInitializeResponse> {\n\t\ttry {\n\t\t\tconst response = await fetch(\"/api/upload/initialize\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\tfileName: file.name,\n\t\t\t\t\tfileSize: file.size,\n\t\t\t\t\ttotalChunks: Math.ceil(file.size / CHUNK_SIZE),\n\t\t\t\t}),\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(\"Failed to initialize upload\");\n\t\t\t}\n\n\t\t\treturn await response.json();\n\t\t} catch (error) {\n\t\t\tthrow new Error(\"Failed to initialize upload\");\n\t\t}\n\t}\n\n\tpublic async uploadFile(\n\t\tfile: File,\n\t\tcallbacks: UploadProgressCallback,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tconst { fileId } = await this.initializeUpload(file);\n\t\t\tconst totalChunks = Math.ceil(file.size / CHUNK_SIZE);\n\t\t\tlet uploadedChunks = 0;\n\n\t\t\tcallbacks.onStatusChange(\"analyzing\");\n\n\t\t\tfor (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n\t\t\t\tconst start = chunkIndex * CHUNK_SIZE;\n\t\t\t\tconst end = Math.min(start + CHUNK_SIZE, file.size);\n\t\t\t\tconst chunk = file.slice(start, end);\n\n\t\t\t\tawait this.uploadChunk(chunk, chunkIndex, totalChunks, fileId);\n\t\t\t\tuploadedChunks++;\n\n\t\t\t\tconst progress = Math.round((uploadedChunks / totalChunks) * 100);\n\t\t\t\tcallbacks.onProgress(progress);\n\n\t\t\t\tif (progress >= 30 && progress < 60) {\n\t\t\t\t\tcallbacks.onStatusChange(\"processing\");\n\t\t\t\t} else if (progress >= 60 && progress < 100) {\n\t\t\t\t\tcallbacks.onStatusChange(\"finalizing\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcallbacks.onStatusChange(\"done\");\n\t\t\tcallbacks.onSuccess();\n\t\t} catch (error) {\n\t\t\tcallbacks.onError(error as Error);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}