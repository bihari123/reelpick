{"ast":null,"code":"// src/Components/services/fileUploadService.ts\n\nexport class FileUploadService {\n  constructor() {\n    this.config = {\n      chunkSize: 1024 * 1024,\n      // 1MB chunks\n      maxFileSize: 500 * 1024 * 1024,\n      // 500MB\n      allowedTypes: [\".srt\"],\n      baseUrl: \"http://localhost:8080\"\n    };\n  }\n  async makeRequest(url, method, body, headers = {}) {\n    try {\n      console.log(`Making ${method} request to ${url}`, {\n        headers,\n        body\n      });\n      const response = await fetch(`${this.config.baseUrl}${url}`, {\n        method,\n        headers: {\n          Accept: \"application/json\",\n          ...headers\n        },\n        body\n      });\n\n      // console.log(\"Raw response:\", response);\n      // console.log(response.json());\n      const textResponse = await response.text();\n      console.log(\"Response text:\", textResponse);\n      let data;\n      try {\n        data = textResponse ? JSON.parse(textResponse) : null;\n        console.log(\"Parsed response:\", data);\n      } catch (e) {\n        console.error(\"Error parsing JSON:\", e);\n        throw new Error(\"Invalid JSON response from server\");\n      }\n      if (!response.ok) {\n        var _data;\n        throw new Error(((_data = data) === null || _data === void 0 ? void 0 : _data.error) || `HTTP error! status: ${response.status}`);\n      }\n      if (!data) {\n        throw new Error(\"Empty response from server\");\n      }\n      return data;\n    } catch (error) {\n      console.error(`Request failed: ${url}`, error);\n      throw error;\n    }\n  }\n  async initializeUpload(file) {\n    console.log(\"Initializing upload for file:\", file.name);\n    const initData = {\n      fileName: file.name,\n      fileSize: file.size,\n      totalChunks: Math.ceil(file.size / this.config.chunkSize)\n    };\n    console.log(\"Sending init data:\", initData);\n    try {\n      const response = await this.makeRequest(\"/api/upload/initialize\", \"POST\", JSON.stringify(initData), {\n        \"Content-Type\": \"application/json\"\n      });\n      console.log(\"Initialize response:\", response);\n      if (!response || typeof response.fileId !== \"string\") {\n        console.error(\"Invalid response structure:\", response);\n        throw new Error(\"Invalid response from server: missing or invalid fileId\");\n      }\n      return {\n        fileId: response.fileId,\n        fileName: response.fileName || file.name,\n        fileSize: response.fileSize || file.size\n      };\n    } catch (error) {\n      console.error(\"Initialize upload error:\", error);\n      throw error;\n    }\n  }\n  async uploadChunk(chunk, chunkIndex, totalChunks, fileId) {\n    const formData = new FormData();\n    formData.append(\"chunk\", chunk);\n    formData.append(\"chunkIndex\", chunkIndex.toString());\n    formData.append(\"totalChunks\", totalChunks.toString());\n    formData.append(\"fileId\", fileId);\n    try {\n      const response = await this.makeRequest(\"/api/upload/chunk\", \"POST\", formData, {\n        \"X-File-Id\": fileId,\n        \"X-Chunk-Index\": chunkIndex.toString()\n      });\n      if (!response.received) {\n        throw new Error(response.message || \"Chunk upload failed\");\n      }\n      return response;\n    } catch (error) {\n      console.error(`Failed to upload chunk ${chunkIndex}:`, error);\n      throw error;\n    }\n  }\n  async uploadFile(file, callbacks) {\n    try {\n      console.log(\"Starting upload for file:\", file.name);\n\n      // Validate file before starting upload\n      if (file.size > this.config.maxFileSize) {\n        throw new Error(`File size exceeds maximum limit of ${this.config.maxFileSize / (1024 * 1024)}MB`);\n      }\n      const fileExt = file.name.toLowerCase().split(\".\").pop();\n      if (!fileExt || !this.config.allowedTypes.includes(`.${fileExt}`)) {\n        throw new Error(`File type .${fileExt} is not supported. Allowed types: ${this.config.allowedTypes.join(\", \")}`);\n      }\n\n      // Initialize upload\n      const initResponse = await this.initializeUpload(file);\n      console.log(\"Upload initialized:\", initResponse);\n      if (!initResponse || !initResponse.fileId) {\n        throw new Error(\"Failed to initialize upload: missing fileId\");\n      }\n      const fileId = initResponse.fileId;\n      const totalChunks = Math.ceil(file.size / this.config.chunkSize);\n      let uploadedChunks = 0;\n      callbacks.onStatusChange(\"analyzing\");\n\n      // Upload chunks\n      for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n        const start = chunkIndex * this.config.chunkSize;\n        const end = Math.min(start + this.config.chunkSize, file.size);\n        const chunk = file.slice(start, end);\n        const response = await this.uploadChunk(chunk, chunkIndex, totalChunks, fileId);\n        uploadedChunks++;\n        callbacks.onProgress(response.progress);\n        callbacks.onStatusChange(response.status);\n      }\n      callbacks.onStatusChange(\"done\");\n      callbacks.onSuccess();\n    } catch (error) {\n      console.error(\"Upload failed:\", error);\n      callbacks.onError(error instanceof Error ? error : new Error(String(error)));\n    }\n  }\n}","map":{"version":3,"names":["FileUploadService","constructor","config","chunkSize","maxFileSize","allowedTypes","baseUrl","makeRequest","url","method","body","headers","console","log","response","fetch","Accept","textResponse","text","data","JSON","parse","e","error","Error","ok","_data","status","initializeUpload","file","name","initData","fileName","fileSize","size","totalChunks","Math","ceil","stringify","fileId","uploadChunk","chunk","chunkIndex","formData","FormData","append","toString","received","message","uploadFile","callbacks","fileExt","toLowerCase","split","pop","includes","join","initResponse","uploadedChunks","onStatusChange","start","end","min","slice","onProgress","progress","onSuccess","onError","String"],"sources":["/media/tarun/ITB/code/work/thinkelution/Videolution-Analyzer-App/src/Components/Upload/services/fileUploadService.ts"],"sourcesContent":["// src/Components/services/fileUploadService.ts\n\nimport {\n\tUploadProgressCallback,\n\tChunkUploadResponse,\n\tUploadInitializeResponse,\n\tUploadConfig,\n} from \"../utils/upload.types\";\n\nexport class FileUploadService {\n\tprivate config: UploadConfig = {\n\t\tchunkSize: 1024 * 1024, // 1MB chunks\n\t\tmaxFileSize: 500 * 1024 * 1024, // 500MB\n\t\tallowedTypes: [\".srt\"],\n\t\tbaseUrl: \"http://localhost:8080\",\n\t};\n\n\tprivate async makeRequest<T>(\n\t\turl: string,\n\t\tmethod: string,\n\t\tbody?: any,\n\t\theaders: HeadersInit = {},\n\t): Promise<T> {\n\t\ttry {\n\t\t\tconsole.log(`Making ${method} request to ${url}`, { headers, body });\n\n\t\t\tconst response = await fetch(`${this.config.baseUrl}${url}`, {\n\t\t\t\tmethod,\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\t...headers,\n\t\t\t\t},\n\t\t\t\tbody,\n\t\t\t});\n\n\t\t\t// console.log(\"Raw response:\", response);\n\t\t\t// console.log(response.json());\n\t\t\tconst textResponse = await response.text();\n\t\t\tconsole.log(\"Response text:\", textResponse);\n\n\t\t\tlet data;\n\t\t\ttry {\n\t\t\t\tdata = textResponse ? JSON.parse(textResponse) : null;\n\t\t\t\tconsole.log(\"Parsed response:\", data);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(\"Error parsing JSON:\", e);\n\t\t\t\tthrow new Error(\"Invalid JSON response from server\");\n\t\t\t}\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tdata?.error || `HTTP error! status: ${response.status}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\tthrow new Error(\"Empty response from server\");\n\t\t\t}\n\n\t\t\treturn data as T;\n\t\t} catch (error) {\n\t\t\tconsole.error(`Request failed: ${url}`, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async initializeUpload(\n\t\tfile: File,\n\t): Promise<UploadInitializeResponse> {\n\t\tconsole.log(\"Initializing upload for file:\", file.name);\n\n\t\tconst initData = {\n\t\t\tfileName: file.name,\n\t\t\tfileSize: file.size,\n\t\t\ttotalChunks: Math.ceil(file.size / this.config.chunkSize),\n\t\t};\n\n\t\tconsole.log(\"Sending init data:\", initData);\n\n\t\ttry {\n\t\t\tconst response = await this.makeRequest<UploadInitializeResponse>(\n\t\t\t\t\"/api/upload/initialize\",\n\t\t\t\t\"POST\",\n\t\t\t\tJSON.stringify(initData),\n\t\t\t\t{\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconsole.log(\"Initialize response:\", response);\n\n\t\t\tif (!response || typeof response.fileId !== \"string\") {\n\t\t\t\tconsole.error(\"Invalid response structure:\", response);\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Invalid response from server: missing or invalid fileId\",\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tfileId: response.fileId,\n\t\t\t\tfileName: response.fileName || file.name,\n\t\t\t\tfileSize: response.fileSize || file.size,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Initialize upload error:\", error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async uploadChunk(\n\t\tchunk: Blob,\n\t\tchunkIndex: number,\n\t\ttotalChunks: number,\n\t\tfileId: string,\n\t): Promise<ChunkUploadResponse> {\n\t\tconst formData = new FormData();\n\t\tformData.append(\"chunk\", chunk);\n\t\tformData.append(\"chunkIndex\", chunkIndex.toString());\n\t\tformData.append(\"totalChunks\", totalChunks.toString());\n\t\tformData.append(\"fileId\", fileId);\n\n\t\ttry {\n\t\t\tconst response = await this.makeRequest<ChunkUploadResponse>(\n\t\t\t\t\"/api/upload/chunk\",\n\t\t\t\t\"POST\",\n\t\t\t\tformData,\n\t\t\t\t{\n\t\t\t\t\t\"X-File-Id\": fileId,\n\t\t\t\t\t\"X-Chunk-Index\": chunkIndex.toString(),\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (!response.received) {\n\t\t\t\tthrow new Error(response.message || \"Chunk upload failed\");\n\t\t\t}\n\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tconsole.error(`Failed to upload chunk ${chunkIndex}:`, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async uploadFile(\n\t\tfile: File,\n\t\tcallbacks: UploadProgressCallback,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tconsole.log(\"Starting upload for file:\", file.name);\n\n\t\t\t// Validate file before starting upload\n\t\t\tif (file.size > this.config.maxFileSize) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`File size exceeds maximum limit of ${this.config.maxFileSize / (1024 * 1024)}MB`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst fileExt = file.name.toLowerCase().split(\".\").pop();\n\t\t\tif (!fileExt || !this.config.allowedTypes.includes(`.${fileExt}`)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`File type .${fileExt} is not supported. Allowed types: ${this.config.allowedTypes.join(\", \")}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Initialize upload\n\t\t\tconst initResponse = await this.initializeUpload(file);\n\t\t\tconsole.log(\"Upload initialized:\", initResponse);\n\n\t\t\tif (!initResponse || !initResponse.fileId) {\n\t\t\t\tthrow new Error(\"Failed to initialize upload: missing fileId\");\n\t\t\t}\n\n\t\t\tconst fileId = initResponse.fileId;\n\t\t\tconst totalChunks = Math.ceil(file.size / this.config.chunkSize);\n\t\t\tlet uploadedChunks = 0;\n\n\t\t\tcallbacks.onStatusChange(\"analyzing\");\n\n\t\t\t// Upload chunks\n\t\t\tfor (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n\t\t\t\tconst start = chunkIndex * this.config.chunkSize;\n\t\t\t\tconst end = Math.min(start + this.config.chunkSize, file.size);\n\t\t\t\tconst chunk = file.slice(start, end);\n\n\t\t\t\tconst response = await this.uploadChunk(\n\t\t\t\t\tchunk,\n\t\t\t\t\tchunkIndex,\n\t\t\t\t\ttotalChunks,\n\t\t\t\t\tfileId,\n\t\t\t\t);\n\t\t\t\tuploadedChunks++;\n\n\t\t\t\tcallbacks.onProgress(response.progress);\n\t\t\t\tcallbacks.onStatusChange(response.status);\n\t\t\t}\n\n\t\t\tcallbacks.onStatusChange(\"done\");\n\t\t\tcallbacks.onSuccess();\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Upload failed:\", error);\n\t\t\tcallbacks.onError(\n\t\t\t\terror instanceof Error ? error : new Error(String(error)),\n\t\t\t);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}