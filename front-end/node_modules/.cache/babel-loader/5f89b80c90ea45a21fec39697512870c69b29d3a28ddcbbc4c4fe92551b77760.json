{"ast":null,"code":"// src/services/fileProcessingService.ts\n\nexport class FileProcessingService {\n  constructor() {\n    this.pollTimer = null;\n    this.API_BASE_URL = \"http://0.0.0.0:8080\";\n  }\n  async checkProcessingStatus(fileId) {\n    try {\n      const response = await fetch(`${this.API_BASE_URL}/api/processing/status/${fileId}`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch processing status\");\n      }\n      const data = await response.json();\n      return {\n        status: data.status,\n        progress: data.progress,\n        result: data.result,\n        error: data.error\n      };\n    } catch (error) {\n      console.error(\"Error checking processing status:\", error);\n      throw error;\n    }\n  }\n  startPolling(fileId, onProgress, onComplete, onError) {\n    this.pollTimer = setInterval(async () => {\n      try {\n        const status = await this.checkProcessingStatus(fileId);\n        onProgress(status);\n        if (status.status === \"completed\") {\n          this.stopPolling();\n          onComplete(status.result);\n        } else if (status.status === \"failed\") {\n          this.stopPolling();\n          onError(new Error(status.error || \"Processing failed\"));\n        }\n      } catch (error) {\n        this.stopPolling();\n        onError(error instanceof Error ? error : new Error(\"Unknown error\"));\n      }\n    }, 2000);\n  }\n  stopPolling() {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n}","map":{"version":3,"names":["FileProcessingService","constructor","pollTimer","API_BASE_URL","checkProcessingStatus","fileId","response","fetch","method","headers","Accept","ok","Error","data","json","status","progress","result","error","console","startPolling","onProgress","onComplete","onError","setInterval","stopPolling","clearInterval"],"sources":["/media/tarun/ITB/code/work/thinkelution/Videolution-Analyzer-App/src/Components/Upload/services/fileProcessingService.ts"],"sourcesContent":["// src/services/fileProcessingService.ts\n\nimport { ProcessingStatus, ProcessingStep } from \"../utils/upload.types\";\n\nexport class FileProcessingService {\n  private pollTimer: NodeJS.Timer | null = null;\n  private API_BASE_URL = \"http://0.0.0.0:8080\";\n\n  public async checkProcessingStatus(\n    fileId: string,\n  ): Promise<ProcessingStatus> {\n    try {\n      const response = await fetch(\n        `${this.API_BASE_URL}/api/processing/status/${fileId}`,\n        {\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n          },\n        },\n      );\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch processing status\");\n      }\n\n      const data = await response.json();\n      return {\n        status: data.status as ProcessingStep,\n        progress: data.progress,\n        result: data.result,\n        error: data.error,\n      };\n    } catch (error) {\n      console.error(\"Error checking processing status:\", error);\n      throw error;\n    }\n  }\n\n  public startPolling(\n    fileId: string,\n    onProgress: (status: ProcessingStatus) => void,\n    onComplete: (result: any) => void,\n    onError: (error: Error) => void,\n  ): void {\n    this.pollTimer = setInterval(async () => {\n      try {\n        const status = await this.checkProcessingStatus(fileId);\n        onProgress(status);\n\n        if (status.status === \"completed\") {\n          this.stopPolling();\n          onComplete(status.result);\n        } else if (status.status === \"failed\") {\n          this.stopPolling();\n          onError(new Error(status.error || \"Processing failed\"));\n        }\n      } catch (error) {\n        this.stopPolling();\n        onError(error instanceof Error ? error : new Error(\"Unknown error\"));\n      }\n    }, 2000);\n  }\n\n  public stopPolling(): void {\n    if (this.pollTimer) {\n      clearInterval(this.pollTimer);\n      this.pollTimer = null;\n    }\n  }\n}\n"],"mappings":"AAAA;;AAIA,OAAO,MAAMA,qBAAqB,CAAC;EAAAC,YAAA;IAAA,KACzBC,SAAS,GAAwB,IAAI;IAAA,KACrCC,YAAY,GAAG,qBAAqB;EAAA;EAE5C,MAAaC,qBAAqBA,CAChCC,MAAc,EACa;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,GAAG,IAAI,CAACJ,YAAY,0BAA0BE,MAAM,EAAE,EACtD;QACEG,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPC,MAAM,EAAE;QACV;MACF,CACF,CAAC;MAED,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;MACtD;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAClC,OAAO;QACLC,MAAM,EAAEF,IAAI,CAACE,MAAwB;QACrCC,QAAQ,EAAEH,IAAI,CAACG,QAAQ;QACvBC,MAAM,EAAEJ,IAAI,CAACI,MAAM;QACnBC,KAAK,EAAEL,IAAI,CAACK;MACd,CAAC;IACH,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF;EAEOE,YAAYA,CACjBf,MAAc,EACdgB,UAA8C,EAC9CC,UAAiC,EACjCC,OAA+B,EACzB;IACN,IAAI,CAACrB,SAAS,GAAGsB,WAAW,CAAC,YAAY;MACvC,IAAI;QACF,MAAMT,MAAM,GAAG,MAAM,IAAI,CAACX,qBAAqB,CAACC,MAAM,CAAC;QACvDgB,UAAU,CAACN,MAAM,CAAC;QAElB,IAAIA,MAAM,CAACA,MAAM,KAAK,WAAW,EAAE;UACjC,IAAI,CAACU,WAAW,CAAC,CAAC;UAClBH,UAAU,CAACP,MAAM,CAACE,MAAM,CAAC;QAC3B,CAAC,MAAM,IAAIF,MAAM,CAACA,MAAM,KAAK,QAAQ,EAAE;UACrC,IAAI,CAACU,WAAW,CAAC,CAAC;UAClBF,OAAO,CAAC,IAAIX,KAAK,CAACG,MAAM,CAACG,KAAK,IAAI,mBAAmB,CAAC,CAAC;QACzD;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACd,IAAI,CAACO,WAAW,CAAC,CAAC;QAClBF,OAAO,CAACL,KAAK,YAAYN,KAAK,GAAGM,KAAK,GAAG,IAAIN,KAAK,CAAC,eAAe,CAAC,CAAC;MACtE;IACF,CAAC,EAAE,IAAI,CAAC;EACV;EAEOa,WAAWA,CAAA,EAAS;IACzB,IAAI,IAAI,CAACvB,SAAS,EAAE;MAClBwB,aAAa,CAAC,IAAI,CAACxB,SAAS,CAAC;MAC7B,IAAI,CAACA,SAAS,GAAG,IAAI;IACvB;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}