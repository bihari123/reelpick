{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/Upload/hooks/useFileUpload.ts\n\nimport { useState, useCallback } from \"react\";\nimport { FileUploadService } from \"../services/fileUploadService\";\nimport { validateFile } from \"../utils/fileValidation\";\nexport const useFileUpload = () => {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [status, setStatus] = useState(\"idle\");\n  const [error, setError] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const uploadService = new FileUploadService();\n  const resetUpload = useCallback(() => {\n    setProgress(0);\n    setStatus(\"idle\");\n    setError(null);\n    setIsUploading(false);\n  }, []);\n  const uploadFile = useCallback(async file => {\n    try {\n      const validationError = validateFile(file);\n      if (validationError) {\n        setError(validationError);\n        return;\n      }\n      setIsUploading(true);\n      setError(null);\n      await uploadService.uploadFile(file, {\n        onProgress: setProgress,\n        onStatusChange: setStatus,\n        onSuccess: () => {\n          setIsUploading(false);\n          setStatus(\"done\");\n        },\n        onError: error => {\n          setError(error.message);\n          setIsUploading(false);\n          setStatus(\"idle\");\n        }\n      });\n    } catch (error) {\n      setError(error.message);\n      setIsUploading(false);\n      setStatus(\"idle\");\n    }\n  }, []);\n  return {\n    progress,\n    status,\n    error,\n    isUploading,\n    uploadFile,\n    resetUpload\n  };\n};\n_s(useFileUpload, \"8xpQe5Akr2dtK8Txl6nKwbhXg6Q=\");","map":{"version":3,"names":["useState","useCallback","FileUploadService","validateFile","useFileUpload","_s","progress","setProgress","status","setStatus","error","setError","isUploading","setIsUploading","uploadService","resetUpload","uploadFile","file","validationError","onProgress","onStatusChange","onSuccess","onError","message"],"sources":["/media/tarun/ITB/code/work/thinkelution/Videolution-Analyzer-App/src/Components/Upload/hooks/useFileUpload.ts"],"sourcesContent":["// src/components/Upload/hooks/useFileUpload.ts\n\nimport { useState, useCallback } from \"react\";\nimport { FileUploadService } from \"../services/fileUploadService\";\nimport { UploadStatus } from \"../types/upload.types\";\nimport { UPLOAD_CONFIG } from \"../constants/upload.constants\";\nimport { validateFile } from \"../utils/fileValidation\";\n\ninterface UseFileUploadReturn {\n  progress: number;\n  status: UploadStatus;\n  error: string | null;\n  isUploading: boolean;\n  uploadFile: (file: File) => Promise<void>;\n  resetUpload: () => void;\n}\n\nexport const useFileUpload = (): UseFileUploadReturn => {\n  const [progress, setProgress] = useState<number>(0);\n  const [status, setStatus] = useState<UploadStatus>(\"idle\");\n  const [error, setError] = useState<string | null>(null);\n  const [isUploading, setIsUploading] = useState<boolean>(false);\n\n  const uploadService = new FileUploadService();\n\n  const resetUpload = useCallback(() => {\n    setProgress(0);\n    setStatus(\"idle\");\n    setError(null);\n    setIsUploading(false);\n  }, []);\n\n  const uploadFile = useCallback(async (file: File) => {\n    try {\n      const validationError = validateFile(file);\n      if (validationError) {\n        setError(validationError);\n        return;\n      }\n\n      setIsUploading(true);\n      setError(null);\n\n      await uploadService.uploadFile(file, {\n        onProgress: setProgress,\n        onStatusChange: setStatus,\n        onSuccess: () => {\n          setIsUploading(false);\n          setStatus(\"done\");\n        },\n        onError: (error) => {\n          setError(error.message);\n          setIsUploading(false);\n          setStatus(\"idle\");\n        },\n      });\n    } catch (error) {\n      setError((error as Error).message);\n      setIsUploading(false);\n      setStatus(\"idle\");\n    }\n  }, []);\n\n  return {\n    progress,\n    status,\n    error,\n    isUploading,\n    uploadFile,\n    resetUpload,\n  };\n};\n"],"mappings":";AAAA;;AAEA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,iBAAiB,QAAQ,+BAA+B;AAGjE,SAASC,YAAY,QAAQ,yBAAyB;AAWtD,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAA2B;EAAAC,EAAA;EACtD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAS,CAAC,CAAC;EACnD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAe,MAAM,CAAC;EAC1D,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAU,KAAK,CAAC;EAE9D,MAAMc,aAAa,GAAG,IAAIZ,iBAAiB,CAAC,CAAC;EAE7C,MAAMa,WAAW,GAAGd,WAAW,CAAC,MAAM;IACpCM,WAAW,CAAC,CAAC,CAAC;IACdE,SAAS,CAAC,MAAM,CAAC;IACjBE,QAAQ,CAAC,IAAI,CAAC;IACdE,cAAc,CAAC,KAAK,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,UAAU,GAAGf,WAAW,CAAC,MAAOgB,IAAU,IAAK;IACnD,IAAI;MACF,MAAMC,eAAe,GAAGf,YAAY,CAACc,IAAI,CAAC;MAC1C,IAAIC,eAAe,EAAE;QACnBP,QAAQ,CAACO,eAAe,CAAC;QACzB;MACF;MAEAL,cAAc,CAAC,IAAI,CAAC;MACpBF,QAAQ,CAAC,IAAI,CAAC;MAEd,MAAMG,aAAa,CAACE,UAAU,CAACC,IAAI,EAAE;QACnCE,UAAU,EAAEZ,WAAW;QACvBa,cAAc,EAAEX,SAAS;QACzBY,SAAS,EAAEA,CAAA,KAAM;UACfR,cAAc,CAAC,KAAK,CAAC;UACrBJ,SAAS,CAAC,MAAM,CAAC;QACnB,CAAC;QACDa,OAAO,EAAGZ,KAAK,IAAK;UAClBC,QAAQ,CAACD,KAAK,CAACa,OAAO,CAAC;UACvBV,cAAc,CAAC,KAAK,CAAC;UACrBJ,SAAS,CAAC,MAAM,CAAC;QACnB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,QAAQ,CAAED,KAAK,CAAWa,OAAO,CAAC;MAClCV,cAAc,CAAC,KAAK,CAAC;MACrBJ,SAAS,CAAC,MAAM,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLH,QAAQ;IACRE,MAAM;IACNE,KAAK;IACLE,WAAW;IACXI,UAAU;IACVD;EACF,CAAC;AACH,CAAC;AAACV,EAAA,CAtDWD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}