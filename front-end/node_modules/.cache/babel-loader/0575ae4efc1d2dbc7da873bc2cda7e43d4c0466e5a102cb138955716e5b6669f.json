{"ast":null,"code":"// src/Components/services/fileUploadService.ts\n\nconst API_BASE_URL = \"http://0.0.0.0:8080\";\nexport class FileUploadService {\n  async initializeUpload(file) {\n    console.log(\"Initializing upload for file:\", file.name);\n    const requestData = {\n      fileName: file.name,\n      fileSize: file.size,\n      totalChunks: Math.ceil(file.size / (1024 * 1024)) // 1MB chunks\n    };\n    console.log(\"Request data:\", requestData);\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/upload/initialize`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify(requestData)\n      });\n      console.log(\"Raw response:\", response);\n      const responseText = await response.text();\n      console.log(\"Response text:\", responseText);\n      if (!responseText) {\n        throw new Error(\"Empty response received from server\");\n      }\n      const data = JSON.parse(responseText);\n      console.log(\"Parsed response:\", data);\n      if (!response.ok) {\n        throw new Error(data.error || `Server error: ${response.status}`);\n      }\n      if (!data.fileId) {\n        throw new Error(\"Invalid response: missing fileId\");\n      }\n      return {\n        fileId: data.fileId,\n        fileName: data.fileName || file.name,\n        fileSize: data.fileSize || file.size\n      };\n    } catch (error) {\n      console.error(\"Initialize upload error:\", error);\n      throw error;\n    }\n  }\n  async uploadChunk(chunk, chunkIndex, totalChunks, fileId) {\n    console.log(`Uploading chunk ${chunkIndex + 1}/${totalChunks}`);\n    try {\n      console.log(`sending file id: ${fileId}`);\n      const response = await fetch(`${API_BASE_URL}/api/upload/chunk`, {\n        method: \"POST\",\n        headers: {\n          \"X-File-Id\": fileId,\n          \"X-Chunk-Index\": chunkIndex.toString(),\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/octet-stream\"\n        },\n        body: chunk // Send raw chunk data\n      });\n      console.log(`Chunk ${chunkIndex} response status:`, response.status);\n      const responseText = await response.text();\n      console.log(`Chunk ${chunkIndex} response:`, responseText);\n      if (!responseText) {\n        throw new Error(\"Empty response received from server\");\n      }\n      const data = JSON.parse(responseText);\n      console.log(`Chunk ${chunkIndex} parsed response:`, data);\n      if (!response.ok) {\n        throw new Error(data.error || `Chunk upload failed: ${response.status}`);\n      }\n      if (!data.received) {\n        throw new Error(data.error || \"Chunk upload failed\");\n      }\n      return {\n        received: data.received,\n        status: data.status,\n        progress: data.progress,\n        uploadedSize: data.uploadedSize,\n        totalSize: data.totalSize,\n        message: data.message\n      };\n    } catch (error) {\n      console.error(`Failed to upload chunk ${chunkIndex}:`, error);\n      throw error;\n    }\n  }\n  async uploadFile(file, callbacks) {\n    try {\n      console.log(\"Starting upload for file:\", file.name);\n\n      // Initialize upload\n      const initResponse = await this.initializeUpload(file);\n      console.log(\"Upload initialized:\", initResponse);\n      const CHUNK_SIZE = 1024 * 1024; // 1MB\n      const totalChunks = Math.ceil(file.size / CHUNK_SIZE);\n      let uploadedChunks = 0;\n      callbacks.onStatusChange(\"analyzing\");\n\n      // Upload chunks\n      for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n        const start = chunkIndex * CHUNK_SIZE;\n        const end = Math.min(start + CHUNK_SIZE, file.size);\n        const chunk = file.slice(start, end);\n        console.log(`Uploading chunk ${chunkIndex + 1}/${totalChunks} (${start}-${end})`);\n        const response = await this.uploadChunk(chunk, chunkIndex, totalChunks, initResponse.fileId);\n        uploadedChunks++;\n        callbacks.onProgress(response.progress);\n        callbacks.onStatusChange(response.status);\n        console.log(`Chunk ${chunkIndex + 1} uploaded successfully. Progress: ${response.progress}%`);\n      }\n      console.log(\"Upload completed successfully\");\n      callbacks.onStatusChange(\"done\");\n      callbacks.onSuccess();\n    } catch (error) {\n      console.error(\"Upload failed:\", error);\n      callbacks.onError(error instanceof Error ? error : new Error(String(error)));\n    }\n  }\n}","map":{"version":3,"names":["API_BASE_URL","FileUploadService","initializeUpload","file","console","log","name","requestData","fileName","fileSize","size","totalChunks","Math","ceil","response","fetch","method","headers","Accept","body","JSON","stringify","responseText","text","Error","data","parse","ok","error","status","fileId","uploadChunk","chunk","chunkIndex","toString","received","progress","uploadedSize","totalSize","message","uploadFile","callbacks","initResponse","CHUNK_SIZE","uploadedChunks","onStatusChange","start","end","min","slice","onProgress","onSuccess","onError","String"],"sources":["/media/tarun/ITB/code/work/thinkelution/Videolution-Analyzer-App/src/Components/Upload/services/fileUploadService.ts"],"sourcesContent":["// src/Components/services/fileUploadService.ts\n\nimport {\n\tUploadProgressCallback,\n\tChunkUploadResponse,\n\tUploadInitializeResponse,\n} from \"../utils/upload.types\";\n\nconst API_BASE_URL = \"http://0.0.0.0:8080\";\n\nexport class FileUploadService {\n\tprivate async initializeUpload(\n\t\tfile: File,\n\t): Promise<UploadInitializeResponse> {\n\t\tconsole.log(\"Initializing upload for file:\", file.name);\n\n\t\tconst requestData = {\n\t\t\tfileName: file.name,\n\t\t\tfileSize: file.size,\n\t\t\ttotalChunks: Math.ceil(file.size / (1024 * 1024)), // 1MB chunks\n\t\t};\n\n\t\tconsole.log(\"Request data:\", requestData);\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${API_BASE_URL}/api/upload/initialize`, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\tAccept: \"application/json\",\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(requestData),\n\t\t\t});\n\n\t\t\tconsole.log(\"Raw response:\", response);\n\t\t\tconst responseText = await response.text();\n\t\t\tconsole.log(\"Response text:\", responseText);\n\n\t\t\tif (!responseText) {\n\t\t\t\tthrow new Error(\"Empty response received from server\");\n\t\t\t}\n\n\t\t\tconst data = JSON.parse(responseText);\n\t\t\tconsole.log(\"Parsed response:\", data);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(data.error || `Server error: ${response.status}`);\n\t\t\t}\n\n\t\t\tif (!data.fileId) {\n\t\t\t\tthrow new Error(\"Invalid response: missing fileId\");\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tfileId: data.fileId,\n\t\t\t\tfileName: data.fileName || file.name,\n\t\t\t\tfileSize: data.fileSize || file.size,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Initialize upload error:\", error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async uploadChunk(\n\t\tchunk: Blob,\n\t\tchunkIndex: number,\n\t\ttotalChunks: number,\n\t\tfileId: string,\n\t): Promise<ChunkUploadResponse> {\n\t\tconsole.log(`Uploading chunk ${chunkIndex + 1}/${totalChunks}`);\n\n\t\ttry {\n\t\t\tconsole.log(`sending file id: ${fileId}`);\n\t\t\tconst response = await fetch(`${API_BASE_URL}/api/upload/chunk`, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"X-File-Id\": fileId,\n\t\t\t\t\t\"X-Chunk-Index\": chunkIndex.toString(),\n\t\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\t\"Content-Type\": \"application/octet-stream\",\n\t\t\t\t},\n\t\t\t\tbody: chunk, // Send raw chunk data\n\t\t\t});\n\n\t\t\tconsole.log(`Chunk ${chunkIndex} response status:`, response.status);\n\t\t\tconst responseText = await response.text();\n\t\t\tconsole.log(`Chunk ${chunkIndex} response:`, responseText);\n\n\t\t\tif (!responseText) {\n\t\t\t\tthrow new Error(\"Empty response received from server\");\n\t\t\t}\n\n\t\t\tconst data = JSON.parse(responseText);\n\t\t\tconsole.log(`Chunk ${chunkIndex} parsed response:`, data);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tdata.error || `Chunk upload failed: ${response.status}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!data.received) {\n\t\t\t\tthrow new Error(data.error || \"Chunk upload failed\");\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\treceived: data.received,\n\t\t\t\tstatus: data.status,\n\t\t\t\tprogress: data.progress,\n\t\t\t\tuploadedSize: data.uploadedSize,\n\t\t\t\ttotalSize: data.totalSize,\n\t\t\t\tmessage: data.message,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error(`Failed to upload chunk ${chunkIndex}:`, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async uploadFile(\n\t\tfile: File,\n\t\tcallbacks: UploadProgressCallback,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tconsole.log(\"Starting upload for file:\", file.name);\n\n\t\t\t// Initialize upload\n\t\t\tconst initResponse = await this.initializeUpload(file);\n\t\t\tconsole.log(\"Upload initialized:\", initResponse);\n\n\t\t\tconst CHUNK_SIZE = 1024 * 1024; // 1MB\n\t\t\tconst totalChunks = Math.ceil(file.size / CHUNK_SIZE);\n\t\t\tlet uploadedChunks = 0;\n\n\t\t\tcallbacks.onStatusChange(\"analyzing\");\n\n\t\t\t// Upload chunks\n\t\t\tfor (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n\t\t\t\tconst start = chunkIndex * CHUNK_SIZE;\n\t\t\t\tconst end = Math.min(start + CHUNK_SIZE, file.size);\n\t\t\t\tconst chunk = file.slice(start, end);\n\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Uploading chunk ${chunkIndex + 1}/${totalChunks} (${start}-${end})`,\n\t\t\t\t);\n\n\t\t\t\tconst response = await this.uploadChunk(\n\t\t\t\t\tchunk,\n\t\t\t\t\tchunkIndex,\n\t\t\t\t\ttotalChunks,\n\t\t\t\t\tinitResponse.fileId,\n\t\t\t\t);\n\n\t\t\t\tuploadedChunks++;\n\t\t\t\tcallbacks.onProgress(response.progress);\n\t\t\t\tcallbacks.onStatusChange(response.status);\n\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Chunk ${chunkIndex + 1} uploaded successfully. Progress: ${response.progress}%`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconsole.log(\"Upload completed successfully\");\n\t\t\tcallbacks.onStatusChange(\"done\");\n\t\t\tcallbacks.onSuccess();\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Upload failed:\", error);\n\t\t\tcallbacks.onError(\n\t\t\t\terror instanceof Error ? error : new Error(String(error)),\n\t\t\t);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}