{"ast":null,"code":"// src/Components/services/fileUploadService.ts\nconst API_BASE_URL=\"http://localhost:8080\";export class FileUploadService{async initializeUpload(file){console.log(\"Initializing upload for file:\",file.name);const requestData={fileName:file.name,fileSize:file.size,totalChunks:Math.ceil(file.size/(1024*1024))// 1MB chunks\n};console.log(\"Request data:\",requestData);try{const response=await fetch(`${API_BASE_URL}/api/upload/initialize`,{method:\"POST\",headers:{\"Content-Type\":\"application/json\",Accept:\"application/json\"},body:JSON.stringify(requestData)});console.log(\"Raw response:\",response);const responseText=await response.text();console.log(\"Response text:\",responseText);if(!responseText){throw new Error(\"Empty response received from server\");}const data=JSON.parse(responseText);console.log(\"Parsed response:\",data);if(!response.ok){throw new Error(data.error||`Server error: ${response.status}`);}if(!data.fileId){throw new Error(\"Invalid response: missing fileId\");}return{fileId:data.fileId,fileName:data.fileName||file.name,fileSize:data.fileSize||file.size};}catch(error){console.error(\"Initialize upload error:\",error);throw error;}}async uploadChunk(chunk,chunkIndex,totalChunks,fileId){console.log(`Uploading chunk ${chunkIndex+1}/${totalChunks}`);try{const response=await fetch(`${API_BASE_URL}/api/upload/chunk`,{method:\"POST\",headers:{\"X-File-Id\":fileId,\"X-Chunk-Index\":chunkIndex.toString(),Accept:\"application/json\",\"Content-Type\":\"application/octet-stream\"},body:chunk// Send raw chunk data\n});console.log(`Chunk ${chunkIndex} response status:`,response.status);const responseText=await response.text();console.log(`Chunk ${chunkIndex} response:`,responseText);if(!responseText){throw new Error(\"Empty response received from server\");}const data=JSON.parse(responseText);console.log(`Chunk ${chunkIndex} parsed response:`,data);if(!response.ok){throw new Error(data.error||`Chunk upload failed: ${response.status}`);}if(!data.received){throw new Error(data.error||\"Chunk upload failed\");}return{received:data.received,status:data.status,progress:data.progress,uploadedSize:data.uploadedSize,totalSize:data.totalSize,message:data.message,analysis:data.analysis.timeline};}catch(error){console.error(`Failed to upload chunk ${chunkIndex}:`,error);throw error;}}async uploadFile(file,callbacks){try{console.log(\"Starting upload for file:\",file.name);// Initialize upload\nconst initResponse=await this.initializeUpload(file);console.log(\"Upload initialized:\",initResponse);const CHUNK_SIZE=1024*1024;// 1MB\nconst totalChunks=Math.ceil(file.size/CHUNK_SIZE);let uploadedChunks=0;callbacks.onStatusChange(\"analyzing\");let arr=[];// Upload chunks\nfor(let chunkIndex=0;chunkIndex<totalChunks;chunkIndex++){const start=chunkIndex*CHUNK_SIZE;const end=Math.min(start+CHUNK_SIZE,file.size);const chunk=file.slice(start,end);console.log(`Uploading chunk ${chunkIndex+1}/${totalChunks} (${start}-${end})`);const response=await this.uploadChunk(chunk,chunkIndex,totalChunks,initResponse.fileId);uploadedChunks++;callbacks.onProgress(response.progress);callbacks.onStatusChange(response.status);arr=[...(response.analysis||[])];console.log(`Chunk ${chunkIndex+1} uploaded successfully. Progress: ${response.progress}%`);}console.log(\"Upload completed successfully\");callbacks.onStatusChange(\"done\");callbacks.onSuccess(arr);}catch(error){console.error(\"Upload failed:\",error);callbacks.onError(error instanceof Error?error:new Error(String(error)));}}}","map":{"version":3,"names":["API_BASE_URL","FileUploadService","initializeUpload","file","console","log","name","requestData","fileName","fileSize","size","totalChunks","Math","ceil","response","fetch","method","headers","Accept","body","JSON","stringify","responseText","text","Error","data","parse","ok","error","status","fileId","uploadChunk","chunk","chunkIndex","toString","received","progress","uploadedSize","totalSize","message","analysis","timeline","uploadFile","callbacks","initResponse","CHUNK_SIZE","uploadedChunks","onStatusChange","arr","start","end","min","slice","onProgress","onSuccess","onError","String"],"sources":["/media/tarun/ITB/code/work/thinkelution/Videolution-Analyzer-App/src/Components/Upload/services/fileUploadService.ts"],"sourcesContent":["// src/Components/services/fileUploadService.ts\n\nimport {\n\tUploadProgressCallback,\n\tChunkUploadResponse,\n\tUploadInitializeResponse,\n\tTimeline,\n} from \"../utils/upload.types\";\n\nconst API_BASE_URL = \"http://localhost:8080\";\n\nexport class FileUploadService {\n\tprivate async initializeUpload(\n\t\tfile: File,\n\t): Promise<UploadInitializeResponse> {\n\t\tconsole.log(\"Initializing upload for file:\", file.name);\n\n\t\tconst requestData = {\n\t\t\tfileName: file.name,\n\t\t\tfileSize: file.size,\n\t\t\ttotalChunks: Math.ceil(file.size / (1024 * 1024)), // 1MB chunks\n\t\t};\n\n\t\tconsole.log(\"Request data:\", requestData);\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${API_BASE_URL}/api/upload/initialize`, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\tAccept: \"application/json\",\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(requestData),\n\t\t\t});\n\n\t\t\tconsole.log(\"Raw response:\", response);\n\t\t\tconst responseText = await response.text();\n\t\t\tconsole.log(\"Response text:\", responseText);\n\n\t\t\tif (!responseText) {\n\t\t\t\tthrow new Error(\"Empty response received from server\");\n\t\t\t}\n\n\t\t\tconst data = JSON.parse(responseText);\n\t\t\tconsole.log(\"Parsed response:\", data);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(data.error || `Server error: ${response.status}`);\n\t\t\t}\n\n\t\t\tif (!data.fileId) {\n\t\t\t\tthrow new Error(\"Invalid response: missing fileId\");\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tfileId: data.fileId,\n\t\t\t\tfileName: data.fileName || file.name,\n\t\t\t\tfileSize: data.fileSize || file.size,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Initialize upload error:\", error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async uploadChunk(\n\t\tchunk: Blob,\n\t\tchunkIndex: number,\n\t\ttotalChunks: number,\n\t\tfileId: string,\n\t): Promise<ChunkUploadResponse> {\n\t\tconsole.log(`Uploading chunk ${chunkIndex + 1}/${totalChunks}`);\n\n\t\ttry {\n\t\t\tconst response = await fetch(`${API_BASE_URL}/api/upload/chunk`, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"X-File-Id\": fileId,\n\t\t\t\t\t\"X-Chunk-Index\": chunkIndex.toString(),\n\t\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\t\"Content-Type\": \"application/octet-stream\",\n\t\t\t\t},\n\t\t\t\tbody: chunk, // Send raw chunk data\n\t\t\t});\n\n\t\t\tconsole.log(`Chunk ${chunkIndex} response status:`, response.status);\n\t\t\tconst responseText = await response.text();\n\t\t\tconsole.log(`Chunk ${chunkIndex} response:`, responseText);\n\n\t\t\tif (!responseText) {\n\t\t\t\tthrow new Error(\"Empty response received from server\");\n\t\t\t}\n\n\t\t\tconst data = JSON.parse(responseText);\n\t\t\tconsole.log(`Chunk ${chunkIndex} parsed response:`, data);\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tdata.error || `Chunk upload failed: ${response.status}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!data.received) {\n\t\t\t\tthrow new Error(data.error || \"Chunk upload failed\");\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\treceived: data.received,\n\t\t\t\tstatus: data.status,\n\t\t\t\tprogress: data.progress,\n\t\t\t\tuploadedSize: data.uploadedSize,\n\t\t\t\ttotalSize: data.totalSize,\n\t\t\t\tmessage: data.message,\n\t\t\t\tanalysis: data.analysis.timeline,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tconsole.error(`Failed to upload chunk ${chunkIndex}:`, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tpublic async uploadFile(\n\t\tfile: File,\n\t\tcallbacks: UploadProgressCallback,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tconsole.log(\"Starting upload for file:\", file.name);\n\n\t\t\t// Initialize upload\n\t\t\tconst initResponse = await this.initializeUpload(file);\n\t\t\tconsole.log(\"Upload initialized:\", initResponse);\n\n\t\t\tconst CHUNK_SIZE = 1024 * 1024; // 1MB\n\t\t\tconst totalChunks = Math.ceil(file.size / CHUNK_SIZE);\n\t\t\tlet uploadedChunks = 0;\n\n\t\t\tcallbacks.onStatusChange(\"analyzing\");\n\t\t\tlet arr: Timeline = [];\n\t\t\t// Upload chunks\n\t\t\tfor (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n\t\t\t\tconst start = chunkIndex * CHUNK_SIZE;\n\t\t\t\tconst end = Math.min(start + CHUNK_SIZE, file.size);\n\t\t\t\tconst chunk = file.slice(start, end);\n\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Uploading chunk ${chunkIndex + 1}/${totalChunks} (${start}-${end})`,\n\t\t\t\t);\n\n\t\t\t\tconst response = await this.uploadChunk(\n\t\t\t\t\tchunk,\n\t\t\t\t\tchunkIndex,\n\t\t\t\t\ttotalChunks,\n\t\t\t\t\tinitResponse.fileId,\n\t\t\t\t);\n\n\t\t\t\tuploadedChunks++;\n\t\t\t\tcallbacks.onProgress(response.progress);\n\t\t\t\tcallbacks.onStatusChange(response.status);\n\t\t\t\tarr = [...(response.analysis || [])];\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Chunk ${chunkIndex + 1} uploaded successfully. Progress: ${response.progress}%`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconsole.log(\"Upload completed successfully\");\n\t\t\tcallbacks.onStatusChange(\"done\");\n\t\t\tcallbacks.onSuccess(arr);\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Upload failed:\", error);\n\t\t\tcallbacks.onError(\n\t\t\t\terror instanceof Error ? error : new Error(String(error)),\n\t\t\t);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}