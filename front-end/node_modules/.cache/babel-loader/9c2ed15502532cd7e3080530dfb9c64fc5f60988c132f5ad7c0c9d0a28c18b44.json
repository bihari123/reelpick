{"ast":null,"code":"// src/Components/services/fileUploadService.ts\n\nexport class FileUploadService {\n  constructor() {\n    this.config = {\n      chunkSize: 1024 * 1024,\n      // 1MB chunks\n      maxFileSize: 500 * 1024 * 1024,\n      // 500MB\n      allowedTypes: [\".srt\"],\n      baseUrl: \"http://localhost:8080\"\n    };\n  }\n  async makeRequest(url, method, body, headers) {\n    try {\n      const response = await fetch(`${this.config.baseUrl}${url}`, {\n        method,\n        headers: {\n          ...headers\n        },\n        body\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error(`Request failed: ${url}`, error);\n      throw error;\n    }\n  }\n  async initializeUpload(file) {\n    console.log(\"Initializing upload for file:\", file.name);\n    try {\n      const response = await this.makeRequest(\"/api/upload/initialize\", \"POST\", JSON.stringify({\n        fileName: file.name,\n        fileSize: file.size,\n        totalChunks: Math.ceil(file.size / this.config.chunkSize)\n      }), {\n        \"Content-Type\": \"application/json\"\n      });\n      console.log(\"Initialize response:\", response);\n      if (!response || !response.fileId) {\n        throw new Error(\"Invalid response from server: missing fileId\");\n      }\n      return response;\n    } catch (error) {\n      console.error(\"Initialize upload error:\", error);\n      throw error;\n    }\n  }\n  async uploadChunk(chunk, chunkIndex, totalChunks, fileId) {\n    const formData = new FormData();\n    formData.append(\"chunk\", chunk);\n    formData.append(\"chunkIndex\", chunkIndex.toString());\n    formData.append(\"totalChunks\", totalChunks.toString());\n    formData.append(\"fileId\", fileId);\n    return this.makeRequest(\"/api/upload/chunk\", \"POST\", formData, {\n      \"X-File-Id\": fileId,\n      \"X-Chunk-Index\": chunkIndex.toString()\n    });\n  }\n  async uploadFile(file, callbacks) {\n    try {\n      console.log(\"Starting upload for file:\", file.name);\n\n      // Validate file before starting upload\n      if (file.size > this.config.maxFileSize) {\n        throw new Error(`File size exceeds maximum limit of ${this.config.maxFileSize / (1024 * 1024)}MB`);\n      }\n      const fileExt = file.name.toLowerCase().split(\".\").pop();\n      if (!fileExt || !this.config.allowedTypes.includes(`.${fileExt}`)) {\n        throw new Error(`File type .${fileExt} is not supported. Allowed types: ${this.config.allowedTypes.join(\", \")}`);\n      }\n\n      // Initialize upload\n      const initResponse = await this.initializeUpload(file);\n      console.log(\"Upload initialized:\", initResponse);\n      if (!initResponse || !initResponse.fileId) {\n        throw new Error(\"Failed to initialize upload: missing fileId\");\n      }\n      const fileId = initResponse.fileId;\n      const totalChunks = Math.ceil(file.size / this.config.chunkSize);\n      let uploadedChunks = 0;\n      callbacks.onStatusChange(\"analyzing\");\n\n      // Upload chunks\n      for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n        const start = chunkIndex * this.config.chunkSize;\n        const end = Math.min(start + this.config.chunkSize, file.size);\n        const chunk = file.slice(start, end);\n        const response = await this.uploadChunk(chunk, chunkIndex, totalChunks, fileId);\n        uploadedChunks++;\n        if (!response.received) {\n          throw new Error(response.message || \"Chunk upload failed\");\n        }\n        callbacks.onProgress(response.progress);\n        callbacks.onStatusChange(response.status);\n      }\n      callbacks.onStatusChange(\"done\");\n      callbacks.onSuccess();\n    } catch (error) {\n      console.error(\"Upload failed:\", error);\n      callbacks.onError(error instanceof Error ? error : new Error(String(error)));\n    }\n  }\n}","map":{"version":3,"names":["FileUploadService","constructor","config","chunkSize","maxFileSize","allowedTypes","baseUrl","makeRequest","url","method","body","headers","response","fetch","data","json","ok","Error","error","status","console","initializeUpload","file","log","name","JSON","stringify","fileName","fileSize","size","totalChunks","Math","ceil","fileId","uploadChunk","chunk","chunkIndex","formData","FormData","append","toString","uploadFile","callbacks","fileExt","toLowerCase","split","pop","includes","join","initResponse","uploadedChunks","onStatusChange","start","end","min","slice","received","message","onProgress","progress","onSuccess","onError","String"],"sources":["/media/tarun/ITB/code/work/thinkelution/Videolution-Analyzer-App/src/Components/Upload/services/fileUploadService.ts"],"sourcesContent":["// src/Components/services/fileUploadService.ts\n\nimport {\n\tUploadProgressCallback,\n\tChunkUploadResponse,\n\tUploadInitializeResponse,\n\tUploadConfig,\n} from \"../utils/upload.types\";\n\nexport class FileUploadService {\n\tprivate config: UploadConfig = {\n\t\tchunkSize: 1024 * 1024, // 1MB chunks\n\t\tmaxFileSize: 500 * 1024 * 1024, // 500MB\n\t\tallowedTypes: [\".srt\"],\n\t\tbaseUrl: \"http://localhost:8080\",\n\t};\n\n\tprivate async makeRequest<T>(\n\t\turl: string,\n\t\tmethod: string,\n\t\tbody?: any,\n\t\theaders?: HeadersInit,\n\t): Promise<T> {\n\t\ttry {\n\t\t\tconst response = await fetch(`${this.config.baseUrl}${url}`, {\n\t\t\t\tmethod,\n\t\t\t\theaders: {\n\t\t\t\t\t...headers,\n\t\t\t\t},\n\t\t\t\tbody,\n\t\t\t});\n\n\t\t\tconst data = await response.json();\n\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error(data.error || `HTTP error! status: ${response.status}`);\n\t\t\t}\n\n\t\t\treturn data as T;\n\t\t} catch (error) {\n\t\t\tconsole.error(`Request failed: ${url}`, error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async initializeUpload(\n\t\tfile: File,\n\t): Promise<UploadInitializeResponse> {\n\t\tconsole.log(\"Initializing upload for file:\", file.name);\n\t\ttry {\n\t\t\tconst response = await this.makeRequest<UploadInitializeResponse>(\n\t\t\t\t\"/api/upload/initialize\",\n\t\t\t\t\"POST\",\n\t\t\t\tJSON.stringify({\n\t\t\t\t\tfileName: file.name,\n\t\t\t\t\tfileSize: file.size,\n\t\t\t\t\ttotalChunks: Math.ceil(file.size / this.config.chunkSize),\n\t\t\t\t}),\n\t\t\t\t{\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tconsole.log(\"Initialize response:\", response);\n\n\t\t\tif (!response || !response.fileId) {\n\t\t\t\tthrow new Error(\"Invalid response from server: missing fileId\");\n\t\t\t}\n\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Initialize upload error:\", error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async uploadChunk(\n\t\tchunk: Blob,\n\t\tchunkIndex: number,\n\t\ttotalChunks: number,\n\t\tfileId: string,\n\t): Promise<ChunkUploadResponse> {\n\t\tconst formData = new FormData();\n\t\tformData.append(\"chunk\", chunk);\n\t\tformData.append(\"chunkIndex\", chunkIndex.toString());\n\t\tformData.append(\"totalChunks\", totalChunks.toString());\n\t\tformData.append(\"fileId\", fileId);\n\n\t\treturn this.makeRequest<ChunkUploadResponse>(\n\t\t\t\"/api/upload/chunk\",\n\t\t\t\"POST\",\n\t\t\tformData,\n\t\t\t{\n\t\t\t\t\"X-File-Id\": fileId,\n\t\t\t\t\"X-Chunk-Index\": chunkIndex.toString(),\n\t\t\t},\n\t\t);\n\t}\n\n\tpublic async uploadFile(\n\t\tfile: File,\n\t\tcallbacks: UploadProgressCallback,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tconsole.log(\"Starting upload for file:\", file.name);\n\n\t\t\t// Validate file before starting upload\n\t\t\tif (file.size > this.config.maxFileSize) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`File size exceeds maximum limit of ${this.config.maxFileSize / (1024 * 1024)}MB`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst fileExt = file.name.toLowerCase().split(\".\").pop();\n\t\t\tif (!fileExt || !this.config.allowedTypes.includes(`.${fileExt}`)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`File type .${fileExt} is not supported. Allowed types: ${this.config.allowedTypes.join(\", \")}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Initialize upload\n\t\t\tconst initResponse = await this.initializeUpload(file);\n\t\t\tconsole.log(\"Upload initialized:\", initResponse);\n\n\t\t\tif (!initResponse || !initResponse.fileId) {\n\t\t\t\tthrow new Error(\"Failed to initialize upload: missing fileId\");\n\t\t\t}\n\n\t\t\tconst fileId = initResponse.fileId;\n\t\t\tconst totalChunks = Math.ceil(file.size / this.config.chunkSize);\n\t\t\tlet uploadedChunks = 0;\n\n\t\t\tcallbacks.onStatusChange(\"analyzing\");\n\n\t\t\t// Upload chunks\n\t\t\tfor (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {\n\t\t\t\tconst start = chunkIndex * this.config.chunkSize;\n\t\t\t\tconst end = Math.min(start + this.config.chunkSize, file.size);\n\t\t\t\tconst chunk = file.slice(start, end);\n\n\t\t\t\tconst response = await this.uploadChunk(\n\t\t\t\t\tchunk,\n\t\t\t\t\tchunkIndex,\n\t\t\t\t\ttotalChunks,\n\t\t\t\t\tfileId,\n\t\t\t\t);\n\t\t\t\tuploadedChunks++;\n\n\t\t\t\tif (!response.received) {\n\t\t\t\t\tthrow new Error(response.message || \"Chunk upload failed\");\n\t\t\t\t}\n\n\t\t\t\tcallbacks.onProgress(response.progress);\n\t\t\t\tcallbacks.onStatusChange(response.status);\n\t\t\t}\n\n\t\t\tcallbacks.onStatusChange(\"done\");\n\t\t\tcallbacks.onSuccess();\n\t\t} catch (error) {\n\t\t\tconsole.error(\"Upload failed:\", error);\n\t\t\tcallbacks.onError(\n\t\t\t\terror instanceof Error ? error : new Error(String(error)),\n\t\t\t);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}